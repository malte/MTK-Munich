---
import "../styles/base.css";
// import Footer from '../components/Footer.astro';
import Header from "../components/Header.astro";
import Nav from "../components/Nav.astro";
interface Props {
  title: string;
  wrapperWidth: string;
}
import { getLangFromUrl } from "../i18n/utils";
import type { arrayOutputType } from "astro/zod";
const lang = getLangFromUrl(Astro.url);
const { title, wrapperWidth = "global-padding py-12" } = Astro.props;
---

<!doctype html>
<html lang={lang} class="bg-stone-100 text-stone-900">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1,maximum-scale=1"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="relative overflow-x-hidden min-h-[200vh]">
      <Nav />
      <slot />
    </div>
    <script>
      const curvedHeadlines = document.querySelectorAll(".curved-headline");
      const windowWidth = window.innerWidth;
      const breakpoints = { sm: 640, md: 768, lg: 1024, xl: 1280, xxl: 1536 };
      const breakpoint = Object.keys(breakpoints).find(
        (key) => windowWidth < breakpoints[key]
      );
      let offsetSelector = 0;
      switch (breakpoint) {
        case "sm":
          offsetSelector = 1;
          break;
        case "md":
          offsetSelector = 2;
          break;
        case "lg":
          offsetSelector = 3;
          break;
        case "xl":
          offsetSelector = 4;
          break;
        case "xxl":
          offsetSelector = 5;
          break;
        default:
          offsetSelector = 0;
          break;
      }
      console.log(breakpoint);
      function updateCurvedHeadlines() {
        curvedHeadlines.forEach((ele) => {
          const textPath = ele.querySelector("textPath");
          const direction = ele.getAttribute("direction");
          const offset = parseInt(ele.getAttribute("offset"));
          const eleTop = ele.getBoundingClientRect().top;
          const eleOffsetPercent =
            direction == "L2R"
              ? -(eleTop / 10 + offset) % 80
              : (eleTop / 10 + offset) % 80;
          textPath.setAttribute("startOffset", `${eleOffsetPercent}%`);
        });
      }

      function update() {
        updateCurvedHeadlines();
        requestAnimationFrame(update);
      }

      window.addEventListener("scroll", update);
      update();
    </script>
  </body>
</html>
