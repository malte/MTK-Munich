---
import "../styles/base.css";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Nav from "../components/Nav.astro";
interface Props {
  frontmatter: {
    title: string;
    description: string;
    contact: boolean;
  };
}
import Logos from "../components/Logos.astro";
import { getLangFromUrl } from "../i18n/utils";
import Contactform from "../components/Contactform.astro";
import type { arrayOutputType } from "astro/zod";
const lang = getLangFromUrl(Astro.url);
const { frontmatter = { title: "", description: "", contact: true } } =
  Astro.props;
---

<!doctype html>
<html lang={lang} class="bg-stone-100 text-stone-900">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={frontmatter.description} />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1,maximum-scale=1"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={frontmatter.description} />
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <div class="relative overflow-x-hidden min-h-[200vh]">
      <Logos />
      <Nav />
      <div class="container-slim markdown">
        <slot />
        {frontmatter.contact ?? <Contactform class="mt-24" />}
      </div>
      <Footer />
    </div>
    <script>
      const curvedHeadlines = document.querySelectorAll(".curved-headline");
      const windowWidth = window.innerWidth;
      let offsetSelector = // get value from css variable at root
        parseInt(
          getComputedStyle(document.documentElement).getPropertyValue(
            "--screenSizeSelector"
          )
        ) || 0;
      console.log(offsetSelector);
      function updateCurvedHeadlines() {
        curvedHeadlines.forEach((ele) => {
          const textPath = ele.querySelector("textPath");
          const direction = ele.getAttribute("direction");

          const offset = parseInt(ele.getAttribute("offset"));
          const eleTop = ele.getBoundingClientRect().top;
          const eleOffsetPercent =
            direction == "L2R"
              ? -(eleTop / 10 + offset) % 100
              : (eleTop / 10 + offset) % 100;
          textPath.setAttribute("startOffset", `${eleOffsetPercent}%`);
        });
      }

      function update() {
        updateCurvedHeadlines();
        requestAnimationFrame(update);
      }

      window.addEventListener("scroll", update);
      update();
    </script>
  </body>
</html>
