---
import "../styles/base.css";
// import Footer from '../components/Footer.astro';
import Header from "../components/Header.astro";
import Nav from "../components/Nav.astro";
interface Props {
  title: string;
}
import { getLangFromUrl } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const { title } = Astro.props;
---

<!doctype html>
<html lang={lang} class="bg-stone-100 text-stone-900">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1,maximum-scale=1"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="relative overflow-x-hidden">
      <Nav />
      <slot />
    </div>
    <script is:inline>
      function updateScroll() {
        document.body.style.setProperty(
          "--scroll",
          window.pageYOffset ||
            (document.documentElement.scrollTop /
              (document.body.offsetHeight - window.innerHeight)) *
              100
        );
      }

      const curvedHeadlines = document.querySelectorAll(".curved-headline");

      function updateCurvedHeadlines() {
        //use each elements custom attribute offset to set an individual startOffset of the textPath

        curvedHeadlines.forEach((ele) => {
          const textPath = ele.querySelector("textPath");
          const direction = ele.getAttribute("direction");
          const eleTop = ele.getBoundingClientRect().top;
          const eleHeight = ele.getBoundingClientRect().height;
          const eleBottom = eleTop + eleHeight;
          const eleCenter = eleTop + eleHeight / 2;
          const eleCenterOffset = eleCenter / window.innerHeight;
          const eleTopOffset = eleTop / window.innerHeight;
          const eleBottomOffset = eleBottom / window.innerHeight;
          const eleOffset = eleTopOffset + eleHeight / window.innerHeight;
          console.log(direction);
          const eleOffsetPercent =
            direction == "L2R" ? eleOffset * 100 : 100 - eleOffset * 100;
          textPath.setAttribute("startOffset", `${eleOffsetPercent}%`);
          // add curvedHeadlineOffsetPercent to the text innerHtml value
          // reduce to float with 2 decimals
          //textPath.innerHTML = `${curvedHeadlineOffsetPercent.toFixed(2)}%`;
        });
      }

      function update() {
        updateScroll();
        updateCurvedHeadlines();
        requestAnimationFrame(update);
      }

      window.addEventListener("scroll", update);
      update();
    </script>
  </body>
</html>
