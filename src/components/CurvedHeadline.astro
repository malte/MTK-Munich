---
import { generateUniqueId } from "../utils.js";

const uniqueId = generateUniqueId();
const curveId = generateUniqueId();

const {
  tag = "h2",
  type,
  offset = 0,
  class: className,
  ...props
} = Astro.props;
const allowedTags = ["h1", "h2", "h3", "h4", "h5", "h6"];
const headlineTag = allowedTags.includes(tag) ? tag : "h2";
const curves = [
  "M 100,100 a 1200,1200 0 0,1 800,300",
  "M 100,300 a 700,700 0 0,1 800,0",
  "M 100,400 a 1200,1200 0 0,1 800,-300",
  "M 100,100 a 700,700 0 0,0 800,0",
];
const curve = curves[type];
---

<div
  id={uniqueId}
  class:list={[className, "font-extrabold pointer-events-none	"]}
>
  <Fragment set:html={`<${headlineTag}>`} />
  <svg viewBox="0 0 1000 500">
    <path
      id={curveId}
      fill="transparent"
      stroke="#0000c8"
      stroke-width="0"
      d={curve}></path>
    <text width="500" class="text-blue-600">
      <textPath href=`#${curveId}` class="animated-text" startOffset="0">
        <slot />
      </textPath>
    </text>
  </svg>
  <Fragment set:html={`</${headlineTag}>`} />
  <script define:vars={{ uniqueId, offset }} is:inline>
    const div = document.getElementById(uniqueId);
    const textPath = div.querySelector("textPath");

    window.addEventListener(
      "scroll",
      () => {
        const scrollPos =
          document.documentElement.scrollTop /
          (document.body.offsetHeight - window.innerHeight);
        console.log(scrollPos);
        const startOffset = 50 * Math.sin(eval(offset) + scrollPos * 15);
        //console.log(startOffset);
        textPath.setAttribute("startOffset", `${startOffset}%`);
      },
      false
    );
  </script>
</div>
